
#Django command line

python manage.py clearsessions  => clear session
python manage.py runserver = create server
python manage.py migrate  => initialize table 
python manage.py flush => clean data table 

python manage.py makemigrations => create database for project
python manage.py createsuperuser => create an administrative user
Username: admin
Email address: dauqsxuqfaafnavqiet@gmail.com
Vqslapq fieqstafvodqsfafdoi visit /admin

#translate migrations to sql
manage.py sqlmigrate appname 0001 

python manage.py test polls
python manage.py shell


#Database 
ENGINE â€“ Either 'django.db.backends.sqlite3', 'django.db.backends.postgresql', 'django.db.backends.mysql', or 'django.db.backends.oracle'

api  : python manage.py shell

Question.objects.all()
q = Question(question_text="What's new?", pub_date=timezone.now())
q.save()
q.id
q.question_text
Question.objects.filter(id=1)
Question.objects.filter(question_text__startswith='What')
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)

>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
>>> q.choice_set.create(choice_text='Not much', votes=0)
>>> Choice.objects.filter(question__pub_date__year=current_year)
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()


$ python manage.py test polls

$ python manage.py shell
>>> from django.test.utils import setup_test_environment
>>> setup_test_environment()

>>> from django.test import Client
>>> # create an instance of the client for our use
>>> client = Client()
With that ready, we can ask the client to do some work for us:

>>> # get a response from '/'
>>> response = client.get('/')
Not Found: /
>>> response.status_code
404
>>> # on the other hand we should expect to find something at '/polls/'
>>> # we'll use 'reverse()' rather than a hardcoded URL
>>> from django.urls import reverse
>>> response = client.get(reverse('polls:index'))
>>> response.status_code
200
>>> response.content
b'\n    <ul>\n    \n        <li><a href="/polls/1/">What&#x27;s up?</a></li>\n    \n    </ul>\n\n'
>>> response.context['latest_question_list']
<QuerySet [<Question: What's up?>]>