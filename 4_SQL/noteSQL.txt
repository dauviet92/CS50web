MySQL
PostgreSQL
SQLite


id: It is often helpful to have an number that allows us to uniquely identify each row in a table. Here we have specified that id is an integer, and also that it is our primary key, meaning it is our unique identifier. We have additionally specified that it will AUTOINCREMENT, which means we will not have to provide an id every time we add to the table because it will be done automatically.
origin: Here we’ve specified that this will be a text field, and by writing NOT NULL we have required that it have a value.
destination: Again we’ve specified that this will be a text field and prevented it from being null.
duration: Again this value cannot be null, but this time it is represented by an integer rather than as text.


We just saw the NOT NULL and PRIMARY KEY constraint when making a column, but there are several other constraints available to us:

CHECK: Makes sure certain constraints are met before allowing a row to be added/modified
DEFAULT: Provides a default value if no value is given
NOT NULL: Makes sure a value is provided
PRIMARY KEY: Indicates this is the primary way of searching for a row in the database
UNIQUE: Ensures that no two rows have the same value in that column.



CREATE TABLE flights(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    origin TEXT NOT NULL,
    destination TEXT NOT NULL,
    duration INTEGER NOT NULL
);


INSERT INTO flights
    (origin, destination, duration)
    VALUES ("New York", "London", 415);


SELECT * FROM flights;






# Entering into the SQLite Prompt
(base) % sqlite3 flights.sql
SQLite version 3.26.0 2018-12-01 12:34:55
Enter ".help" for usage hints.

# Creating a new Table
sqlite> CREATE TABLE flights(
   ...>     id INTEGER PRIMARY KEY AUTOINCREMENT,
   ...>     origin TEXT NOT NULL,
   ...>     destination TEXT NOT NULL,
   ...>     duration INTEGER NOT NULL
   ...> );

# Listing all current tables (Just flights for now)
sqlite> .tables
flights

# Querying for everything within flights (Which is now empty)
sqlite> SELECT * FROM flights;

# Adding one flight
sqlite> INSERT INTO flights
   ...>     (origin, destination, duration)
   ...>     VALUES ("New York", "London", 415);

# Checking for new information, which we can now see
sqlite> SELECT * FROM flights;
1|New York|London|415

# Adding some more flights
sqlite> INSERT INTO flights (origin, destination, duration) VALUES ("Shanghai", "Paris", 760);
sqlite> INSERT INTO flights (origin, destination, duration) VALUES ("Istanbul", "Tokyo", 700);
sqlite> INSERT INTO flights (origin, destination, duration) VALUES ("New York", "Paris", 435);
sqlite> INSERT INTO flights (origin, destination, duration) VALUES ("Moscow", "Paris", 245);
sqlite> INSERT INTO flights (origin, destination, duration) VALUES ("Lima", "New York", 455);

# Querying this new information
sqlite> SELECT * FROM flights;
1|New York|London|415
2|Shanghai|Paris|760
3|Istanbul|Tokyo|700
4|New York|Paris|435
5|Moscow|Paris|245
6|Lima|New York|455

# Changing the settings to make output more readable
sqlite> .mode columns
sqlite> .headers yes

# Querying all information again
sqlite> SELECT * FROM flights;
id          origin      destination  duration
----------  ----------  -----------  ----------
1           New York    London       415
2           Shanghai    Paris        760
3           Istanbul    Tokyo        700
4           New York    Paris        435
5           Moscow      Paris        245
6           Lima        New York     455

# Searching for just those flights originating in New York
sqlite> SELECT * FROM flights WHERE origin = "New York";
id          origin      destination  duration
----------  ----------  -----------  ----------
1           New York    London       415
4           New York    Paris        435



LIMIT: Limits the number of results returned by a query
ORDER BY: Orders the results based on a specified column
GROUP BY: Groups results by a specified column
HAVING: Allows for additional constraints based on the number of results


origin_id and destination_id, we call those values Foreign Keys

SQL Vulnerabilities
SQL Injection.

SELECT * FROM users
WHERE username = "harry"--" AND password = "12345";


Race Condition.

A race condition could occur if I log into my bank account on both my phone and my laptop, 
and attempt to withdraw $100 on each device. If the bank’s software developers did not deal with race conditions correctly, then I may be able to withdraw $200 from an account with only $150 in it
One potential solution for this problem would be locking the database. We could not allow any other interaction with the database until one transaction has been completed